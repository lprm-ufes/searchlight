// Generated by CoffeeScript 1.9.2
(function() {
  var Dicionario, parseFloatPTBR,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.getJSONP = function(url, func) {
    return $.ajax({
      'url': url,
      'success': func,
      'error': function(e, ee) {
        if (ee === "error") {
          return alert('Erro ao baixar dados JSONP da fonte de dados\n' + url);
        }
      },
      'type': "POST",
      'dataType': 'jsonp'
    });
  };

  window.getJSON = function(url, func) {
    return $.ajax({
      'url': url,
      'success': func,
      'error': function() {
        return alert('Erro ao baixar dados JSONP da fonte de dados\n' + url);
      },
      'dataType': "json",
      'beforeSend': function(xhr) {
        if (xhr.overrideMimeType) {
          return xhr.overrideMimeType("application/json");
        }
      },
      'contentType': 'application/json',
      'mimeType': "textPlain"
    });
  };

  window.getURLParameter = function(name) {
    return $(document).getUrlParam(name);
  };

  Dicionario = (function() {
    function Dicionario(js_hash) {
      this.get = bind(this.get, this);
      this.keys = Object.keys(js_hash);
      this.data = js_hash;
    }

    Dicionario.prototype.get = function(key, value) {
      if (indexOf.call(this.keys, key) >= 0) {
        return this.data[key];
      } else {
        return value;
      }
    };

    return Dicionario;

  })();

  window.string2function = function(func_code) {
    var m, nome, re;
    re = /.*function *(\w*) *\( *(\w*) *\) *\{/mg;
    if ((m = re.exec(func_code)) !== null) {
      if (m.index === re.lastIndex) {
        re.lastIndex++;
      }
      nome = m[1];
      return eval("window['" + nome + "']=" + func_code);
    } else {
      return null;
    }
  };

  parseFloatPTBR = function(str) {
    var itens;
    itens = String(str).match(/^(-*\d+)([\,\.]*)(\d+)?$/);
    if (itens[2]) {
      return parseFloat(itens[1] + "." + itens[3]);
    } else {
      return parseFloat(itens[1]);
    }
  };

  window.parseFloatPTBR = parseFloatPTBR;

  module.exports = {
    Dicionario: Dicionario
  };

}).call(this);

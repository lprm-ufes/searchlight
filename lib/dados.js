// Generated by CoffeeScript 1.9.2
(function() {
  var Dados,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dados = (function() {
    Dados.instances = {};

    Dados.getIS = function(config) {
      return Dados.instances[config.container_id];
    };

    function Dados(sl) {
      this.addMarkersTo = bind(this.addMarkersTo, this);
      this.catAddMarkers = bind(this.catAddMarkers, this);
      this.getCatLatLng = bind(this.getCatLatLng, this);
      this.addItem = bind(this.addItem, this);
      this._getCatOrCreate = bind(this._getCatOrCreate, this);
      this.get_data = bind(this.get_data, this);
      this.get_data_fonte = bind(this.get_data_fonte, this);
      this.clear = bind(this.clear, this);
      Dados.instances[sl.config.container_id] = this;
      this.sl = sl;
      this.config = sl.config;
      this.clear();
    }

    Dados.prototype.clear = function() {
      this.marcadores = {};
      this.marcadores_filhos = {};
      this.categorias = {};
      return this.categorias_id = {};
    };

    Dados.prototype.get_data_fonte = function(fonte, i) {
      console.log(this.config);
      if (this.config.usarCache && this.config.noteid) {
        getJSON(this.config.urlsls + "/note/listaExternal?noteid=" + this.config.noteid + "&fonteIndex=" + i, (function(_this) {
          return function(data) {
            var fonte2;
            fonte2 = {
              url: fonte.url,
              func_code: function(i) {
                return i;
              }
            };
            return _this.carregaDados(data, fonte2);
          };
        })(this));
        return;
      }
      if (fonte.url.indexOf("docs.google.com/spreadsheet") > -1) {
        return Tabletop.init({
          'key': fonte.url,
          'callback': (function(_this) {
            return function(data) {
              return _this.carregaDados(data, fonte);
            };
          })(this),
          'simpleSheet': true
        });
      } else {
        if (fonte.url.slice(0, 4) === "http") {
          if (fonte.url.slice(-4) === ".csv") {
            return Papa.parse(fonte.url, {
              header: true,
              download: true,
              error: function() {
                return alert("Erro ao baixar arquivo csv da fonte de dados:\n" + fonte.url);
              },
              complete: (function(_this) {
                return function(results, file) {
                  return _this.carregaDados(results['data'], fonte);
                };
              })(this)
            });
          } else {
            return getJSONP(fonte.url, (function(_this) {
              return function(data) {
                return _this.carregaDados(data, fonte);
              };
            })(this));
          }
        } else {
          return getJSON(fonte.url, (function(_this) {
            return function(data) {
              return _this.carregaDados(data, fonte);
            };
          })(this));
        }
      }
    };

    Dados.prototype.get_data = function() {
      var fonte, i, j, len, obj, ref, results1;
      obj = this;
      this.fontes_carregadas = [];
      $("#" + this.config.container_id).trigger("dados:carregando");
      ref = this.config.fontes.getFontes();
      results1 = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        fonte = ref[i];
        results1.push(this.get_data_fonte(fonte, i));
      }
      return results1;
    };

    Dados.prototype.carregaDados = function(data, fonte) {
      var d, e, i, j, len;
      this.fontes_carregadas.push(fonte);
      try {
        for (i = j = 0, len = data.length; j < len; i = ++j) {
          d = data[i];
          this.addItem(d, fonte.func_code);
        }
      } catch (_error) {
        e = _error;
        console.error(e.toString());
        this.markers.fire("data:loaded");
        alert("Não foi possivel carregar os dados do mapa. Verifique se a fonte de dados está formatada corretamente.");
        return;
      }
      if (this.fontes_carregadas.length === this.config.fontes.getFontes().length) {
        return $("#" + this.config.container_id).trigger('dados:carregados');
      }
    };

    Dados.prototype.getItensCount = function() {
      var cat, itens, j, len, ref;
      itens = 0;
      ref = this.getCategorias();
      for (j = 0, len = ref.length; j < len; j++) {
        cat = ref[j];
        itens += this.getCatByName(cat).length;
      }
      return itens;
    };

    Dados.prototype.getCatByName = function(cat_name) {
      return this.categorias[cat_name];
    };

    Dados.prototype._getCatOrCreate = function(m) {
      var cat;
      cat = this.categorias[m.cat];
      if (cat) {
        return cat;
      } else {
        this.categorias[m.cat] = [];
        this.categorias_id[m.cat] = m.cat_id;
        return this.categorias[m.cat];
      }
    };

    Dados.prototype.getFilhos = function(pai_id) {
      var m;
      m = this.marcadores_filhos[pai_id];
      if (m) {
        return m;
      } else {
        return [];
      }
    };

    Dados.prototype.adicioneFilho = function(pai_id, filho) {
      if (!this.marcadores_filhos[pai_id]) {
        this.marcadores_filhos[pai_id] = [];
      }
      return this.marcadores_filhos[pai_id].push(filho);
    };

    Dados.prototype.addItem = function(i, func_convert) {
      var cat, e, geoItem, m;
      try {
        geoItem = func_convert(i);
      } catch (_error) {
        e = _error;
        if (Searchlight.debug) {
          console.error("Erro em Dados::addItem: " + e.message, i);
        }
        geoItem = null;
      }
      if (geoItem) {
        if (!geoItem.id) {
          geoItem.id = "" + (parseFloat(geoItem.latitude).toFixed(7)) + (parseFloat(geoItem.longitude).toFixed(7)) + (md5(JSON.stringify(geoItem)));
        }
        m = new Marcador(geoItem, this.config);
        this.marcadores[m.id] = m;
        if (geoItem.id_parent) {
          this.adicioneFilho(geoItem.id_parent, m);
        }
        cat = this._getCatOrCreate(m);
        return cat.push(m);
      }
    };

    Dados.prototype.getCatLatLng = function(name) {
      var i, j, len, m, ref, v;
      v = [];
      ref = this.categorias[name];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        m = ref[i];
        v.push(m.getMark().getLatLng());
      }
      return v;
    };

    Dados.prototype.catAddMarkers = function(name, cluster) {
      var j, len, m, ref, results1;
      ref = this.getCatByName(name);
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        m = ref[j];
        results1.push(cluster.addLayer(m.getMark()));
      }
      return results1;
    };

    Dados.prototype.addMarkersTo = function(cluster) {
      var cat, j, len, ref, results1;
      ref = this.getCategorias();
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        cat = ref[j];
        results1.push(this.catAddMarkers(cat, cluster));
      }
      return results1;
    };

    Dados.prototype.getCategorias = function() {
      var cat;
      return (function() {
        var j, len, ref, results1;
        ref = Object.keys(this.categorias);
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          cat = ref[j];
          results1.push(cat);
        }
        return results1;
      }).call(this);
    };

    return Dados;

  })();

  module.exports = {
    Dados: Dados
  };

}).call(this);

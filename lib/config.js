// Generated by CoffeeScript 1.9.2
(function() {
  var Config, ConfigFontes, Dicionario;

  Dicionario = require('./utilidades').Dicionario;

  ConfigFontes = (function() {
    function ConfigFontes(d) {
      var fonte, fontes_array, func, func_code, index, j, len, url;
      this.fontes = [];
      fontes_array = d.get('fontes', null);
      if (!fontes_array) {
        url = d.get('url', null);
        if (!url) {
          url = decodeURIComponent(getURLParameter("data"));
        }
        func = function(item) {
          return item;
        };
        func_code = d.get('convert', func);
        this.addFonte({
          url: url,
          func_code: func_code
        });
      } else {
        for (index = j = 0, len = fontes_array.length; j < len; index = ++j) {
          fonte = fontes_array[index];
          this.addFonte(fonte);
        }
      }
    }

    ConfigFontes.prototype.addFonte = function(fonte) {
      var e;
      if (fonte.url && typeof fonte.func_code === 'function') {
        return this.fontes.push(fonte);
      } else {
        if (typeof fonte.func_code === 'string') {
          try {
            fonte.func_code = string2function(fonte.func_code);
          } catch (_error) {
            e = _error;
            console.error(e, 'Error ao tentar criar funcao de conversao apartir de texto');
          }
          return this.fontes.push(fonte);
        } else {
          return console.error("Error de configuração de fonte:", fonte);
        }
      }
    };

    ConfigFontes.prototype.removeFonte = function(i) {
      return this.fontes.splice(i, 1);
    };

    ConfigFontes.prototype.getFontes = function() {
      return this.fontes;
    };

    ConfigFontes.prototype.toJSON = function() {
      var array, f, i, j, len, ref;
      array = [];
      ref = this.fontes;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        f = ref[i];
        f.func_code = f.func_code.toString();
        array.push(f);
      }
      return array;
    };

    ConfigFontes.prototype.updateFonte = function(url, func_code, id) {
      var fonte;
      fonte = {
        url: url,
        func_code: func_code
      };
      return this.fontes[id] = fonte;
    };

    ConfigFontes.prototype.getFonte = function(i) {
      return this.fontes[i];
    };

    return ConfigFontes;

  })();

  Config = (function() {
    function Config(opcoes) {
      var d;
      d = new Dicionario(opcoes);
      this.d = d;
      this.container_id = d.get('container_id', 'map');
      this.tab_id = "tab-" + this.container_id;
      this.map_id = "map-" + this.container_id;
      this.lista_id = "lista-" + this.container_id;
      this.configuracoes_id = "configuracoes-" + this.container_id;
      this.Icones = d.get('icones', null);
      this.esconder_icones = d.get('esconder_icones', true);
      this.clusterizar = d.get('clusterizar', true);
      this.usarCache = d.get('usarCache', true);
      this.noteid = d.get('noteid', null);
      this.useBsPopup = d.get('useBsPopup', true);
      this.urlosm = d.get('url_osm', "http://{s}.tile.osm.org/{z}/{x}/{y}.png");
      this.slsUser = d.get('sls_user', '');
      this.slsPassword = '';
      this.urlsls = d.get('url_sls', "http://sl.wancharle.com.br");
      this.viewerTitle = d.get('viewerTitle', '');
      this.fontes = new ConfigFontes(d);
    }

    Config.prototype.toJSON = function() {
      return {
        'container_id': this.container_id,
        'icones': this.icones,
        'esconder_icones': this.esconder_icone,
        'clusterizar': this.clusterizar,
        'useBsPopup': this.useBsPopup,
        'url_osm': this.urlosm,
        'url_sls': this.urlsls,
        'sls_user': this.slsUser,
        'viewerTitle': this.viewerTitle,
        'usarCache': this.usarCache,
        'fontes': this.fontes.toJSON()
      };
    };

    return Config;

  })();

  module.exports = {
    Config: Config,
    ConfigFontes: ConfigFontes
  };

}).call(this);

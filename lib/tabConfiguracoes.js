// Generated by CoffeeScript 1.9.2
(function() {
  var PopupFontes, TabConfiguracoes;

  PopupFontes = require('./popupFontes').PopupFontes;

  TabConfiguracoes = (function() {
    function TabConfiguracoes(config, dados) {
      this.dados = dados;
      this.config = config;
      this.idFontesDados = this.config.container_id + '-ulFontesDados';
      this.popupFontes = new PopupFontes(config, this.dados);
      this.idUrlOSM = config.container_id + '-urlosm';
      this.idClusterizar = this.config.container_id + '-clusterizar';
      this.idUrlSLS = config.container_id + '-urlsls';
      this.idUsuario = config.container_id + '-usuario';
      this.idPassword = config.container_id + '-password';
      this.containerQR = this.config.container_id + '-qrcode';
      this.idViewerTitle = this.config.container_id + '-title';
      this.idUsarCache = this.config.container_id + '-usarcache';
      this.render();
      this.onLoginLogout();
    }

    TabConfiguracoes.prototype.onLoginLogout = function() {
      if (this.dados.api.user.isLogged()) {
        $("#" + this.config.container_id + " .form-login").show();
        $("#" + this.config.container_id + " .form-logout").hide();
        return $("#" + this.config.container_id + " .form-login .user").html(this.dados.api.user.getUsuario());
      } else {
        $("#" + this.config.container_id + " .form-logout").show();
        return $("#" + this.config.container_id + " .form-login").hide();
      }
    };

    TabConfiguracoes.prototype.onQRCodeClick = function() {
      var hashid, self;
      self = this;
      if (this.slsapi.user.isLogged()) {
        if (!this.config.viewerTitle) {
          return alert('Informe um titulo para sua visualização');
        } else {
          hashid = md5(JSON.stringify(this.config.viewerTitle));
          return this.slsapi.notes.getByQuery("user=" + self.slsapi.user.user_id + "&hid=" + hashid, function(data) {
            var note;
            if (data.length > 0) {
              note = data[0];
              return self.slsapi.notes.update(note.id, {
                config: self.config.toJSON()
              }, function() {
                return self.showQRcode(hashid);
              }, function() {
                return alert('Não foi possivel se conectar com Searchlight Storage');
              });
            } else {
              note = {};
              console.log('entrei');
              note.config = self.config.toJSON();
              console.log('passei');
              note.longitude = 0.0;
              note.latitude = 0.0;
              note.hid = hashid;
              note.user = self.slsapi.user.user_id;
              return self.slsapi.notes.enviar(note, self.notebookConfigs, function() {
                return self.showQRcode(hashid);
              }, function(error) {
                console.log(arguments);
                return alert('Não foi possivel conectar com SearchLight Storage');
              });
            }
          }, function() {
            return alert('Não foi possivel se conectar com Searchlight Storage');
          });
        }
      } else {
        return alert('Voce precisa estar conectado ao Searchlight Storage');
      }
    };

    TabConfiguracoes.prototype.showQRcode = function(hashid) {
      var popup, url;
      popup = Popup.getIS(this.config);
      popup.setTitle("<p  style='padding:0px;margin:0px;text-align:center'>QR code para o aplicativo Searchlight Mobile</p>");
      popup.setBody("<br><div style='width:300px;margin:0px auto;' id='" + this.containerQR + "' > </div><br><p style='text-align:center'> Abra o aplicativo Searchlight Mobile e escolha a opção 'Vincular Visualização'. Clique em 'gerar código' para gerar um código de vinculação. Posicione o smartphone adequadamente para ler o código QR acima.</p>");
      popup.show();
      url = "http://sl.wancharle.com/note/?hid=" + hashid;
      return $("#" + this.containerQR).empty().qrcode({
        width: 300,
        height: 300,
        mode: 0,
        'text': url
      });
    };

    TabConfiguracoes.prototype.onSalvar = function() {
      var newconf, searchlight, sl;
      sl = SL("map-" + this.config.container_id);
      $("#" + this.config.container_id).off();
      $("#" + this.config.container_id + " * ").off();
      sl.markers.off();
      sl.map.off();
      sl.markers.clearLayers();
      sl.map.remove();
      newconf = this.config.apiconf.toJSON();
      newconf.namespace = Math.random();
      return searchlight = new Searchlight(newconf);
    };

    TabConfiguracoes.prototype.bind = function() {
      var self;
      self = this;
      $("#" + this.idClusterizar).on('change', function(ev) {
        return self.config.clusterizar = this.checked;
      });
      $("#" + this.idUrlOSM).on('change', function(ev) {
        return self.config.urlosm = $(this).val();
      });
      $("#" + this.idUrl).on('change', function(ev) {
        return self.config.url = $(this).val();
      });
      $("#" + this.idUrlSLS).on('change', function(ev) {
        return self.config.urlsls = $(this).val();
      });
      $("#" + this.idUsuario).on('change', function(ev) {
        return self.config.slsUser = $(this).val();
      });
      $("#" + this.idPassword).on('change', function(ev) {
        return self.config.slsPassword = $(this).val();
      });
      $("#" + this.idViewerTitle).on('change', function(ev) {
        return self.config.viewerTitle = $(this).val();
      });
      $("#" + this.config.configuracoes_id + " button.searchlight-btn-login").on('click', function(ev) {
        return self.slsapi.user.login(self.config.slsUser, self.config.slsPassword);
      });
      $("#" + this.config.configuracoes_id + " button.searchlight-btn-logout").on('click', function(ev) {
        return self.slsapi.user.logout(function() {
          return self.onLoginLogout();
        });
      });
      $(document).on('slsapi.user:loginFinish slsapi.user:loginFail', function() {
        return self.onLoginLogout();
      });
      $("#" + this.config.configuracoes_id + " button.searchlight-btn-qrcodigo").on('click', function(ev) {
        return self.onQRCodeClick();
      });
      $("#" + this.config.configuracoes_id + " button.searchlight-btn-salvar").on('click', function(ev) {
        return self.onSalvar(ev);
      });
      $("#" + this.config.configuracoes_id + " button.searchlight-btn-add-fonte").on('click', function(ev) {
        self.popupFontes.setFonte(null, null);
        return self.popupFontes.renderPopup();
      });
      return $("#" + this.config.container_id).on("fontes:update", function(ev) {
        return self.renderFontes();
      });
    };

    TabConfiguracoes.prototype.renderFontes = function() {
      var fonte, html, i, j, len, ref, self;
      html = "";
      ref = this.dados.getFontes();
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        fonte = ref[i];
        html += "<li class='list-group-item'><span class='pull-right'><a class='link-alterar' data-fonte='" + i + "' href='#'>Alterar</a> | <a class='link-remover' data-fonte='" + i + "' href='#'>Remover</a></span> <a href='" + fonte.url + "' target='_blank'>" + fonte.url + "</a></span></li>";
      }
      $("#" + this.idFontesDados).html(html);
      self = this;
      $("#" + this.config.configuracoes_id + " a.link-remover").on('click', function(ev) {
        var id_fonte;
        id_fonte = $(this).data('fonte');
        fonte = self.dados.getFonte(id_fonte);
        if (confirm("tem certeza que deseja remover esta fonte de dados:\n" + fonte.url)) {
          self.dados.removeFonte(id_fonte);
          return self.renderFontes();
        }
      });
      return $("#" + this.config.configuracoes_id + " a.link-alterar").on('click', function(ev) {
        var id_fonte;
        id_fonte = $(this).data('fonte');
        fonte = self.dados.getFonte(id_fonte);
        self.popupFontes.setFonte(fonte, id_fonte);
        return self.popupFontes.renderPopup(null, 'Alterar');
      });
    };

    TabConfiguracoes.prototype.render = function() {
      var html;
      html = "<form > <br> <fieldset> <legend>Fontes de dados</legend> <div class='form-group'> <ul class='list-group' id='" + this.idFontesDados + "'></ul> <button type='button' class='btn btn-primary searchlight-btn-add-fonte'>Adicionar fonte</button> </div> </fieldset> <br> <fieldset> <legend>Mapa</legend> <div class='form-group'> <label for='urlosm'>Servidor Open Street Map</label> <input type='url' class='form-control' value='" + this.config.urlosm + "' id='" + this.idUrlOSM + "' placeholder='informe uma url do tipo OSM'> </div> <div class='checkbox'> <label> <input type='checkbox' " + (this.config.clusterizar ? "checked" : "") + " id='" + this.idClusterizar + "'> Agrupar marcadores </label> </div> </fieldset> <br> <fieldset> <legend>Searchlight Storage</legend> <div class='form-group'> <label for='urlsls'>Servidor Searchlight Storage</label> <input type='url' class='form-control' value='" + this.config.urlsls + "' id='" + this.idUrlSLS + "' placeholder='informe o endereço do Searchlight Storage'> </div> <div class='form-inline form-logout'> <div class='form-group'> <label for='urlsls'>Usuario</label> <input type='text' class='form-control' value='' id='" + this.idUsuario + "' placeholder='usuario'> </div> <div class='form-group'> <label for='urlsls'>Senha</label> <input type='password' class='form-control' value='' id='" + this.idPassword + "' placeholder='senha'> </div> <button type='button' class='btn btn-default searchlight-btn-login'>conectar</button> </div> <div class='form-group form-login'> <p>Logado como: <span class='user'></span><p> <button type='button' class='btn btn-default searchlight-btn-logout'>desconectar</button> </div> </fieldset> <br> <fieldset> <legend>Compartilhamento</legend> <div class='form-group'> <label for='viewerTitle'>Título</label> <input type='text' class='form-control' value='" + this.config.viewerTitle + "' id='" + this.idViewerTitle + "' placeholder='informe o título da sua visualização'> </div> <button type='button' class='btn btn-default searchlight-btn-compartilhar'>Compartilhar</button> <button type='button' class='btn btn-default searchlight-btn-qrcodigo'>Vincular com Searchlight Mobile</button> </fieldset> <br> <fieldset> <legend> </legend> <button type='button' class='btn btn-default searchlight-btn-salvar'>Aplicar</button> </fieldset> </form>";
      $("#" + this.config.configuracoes_id).html(html);
      this.renderFontes();
      return this.bind();
    };

    return TabConfiguracoes;

  })();

  module.exports = {
    TabConfiguracoes: TabConfiguracoes
  };

}).call(this);

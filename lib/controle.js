// Generated by CoffeeScript 1.9.2
(function() {
  var ClusterCtr, Controle, SLControl, SLUndoRedoControl, controls,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  controls = require('./control');

  SLControl = controls.SLControl;

  SLUndoRedoControl = controls.SLUndoRedoControl;

  ClusterCtr = require('./clusterctr').ClusterCtr;

  Controle = (function() {
    Controle.instances = {};

    Controle.getIS = function(config) {
      return Controle.instances[config.container_id];
    };

    function Controle(sl) {
      this.carregaDados = bind(this.carregaDados, this);
      this.update = bind(this.update, this);
      this.addCatsToControl = bind(this.addCatsToControl, this);
      this.markerClick = bind(this.markerClick, this);
      this.getMarcadoresVisiveis = bind(this.getMarcadoresVisiveis, this);
      this.esconderIconesMarcVisiveis = bind(this.esconderIconesMarcVisiveis, this);
      this.mostrarIconesMarcVisiveis = bind(this.mostrarIconesMarcVisiveis, this);
      this.atualizarIconesMarcVisiveis = bind(this.atualizarIconesMarcVisiveis, this);
      this.registraEventosCamadaAnalise = bind(this.registraEventosCamadaAnalise, this);
      this.show_opcoes = bind(this.show_opcoes, this);
      this.hide_opcoes = bind(this.hide_opcoes, this);
      Controle.instances[sl.config.container_id] = this;
      this.sl = sl;
      this.config = sl.config;
      this.sl.map.addControl(new SLControl());
      this.sl.map.addControl(new SLUndoRedoControl());
      this.id_control = "#" + this.sl.config.map_id + " div.searchlight-control";
      this.id_opcoes = "#" + this.sl.config.map_id + " div.searchlight-opcoes";
      this.id_camadas = this.id_opcoes + "ul";
      $(this.id_control).mouseenter(this.show_opcoes);
      $(this.id_control).bind('touchstart', this.show_opcoes);
      $("#" + this.sl.config.map_id).mouseover(this.hide_opcoes);
      $("#" + this.sl.config.map_id).bind('touchstart', this.hide_opcoes);
      this.sl.map.on('zoomend', (function(_this) {
        return function() {
          if (_this.marcador_clicado === null) {
            _this.sl.map.closePopup();
          } else {
            _this.marcador_clicado = null;
          }
          if (_this.clusterCtr.desfocou) {
            _this.clusterCtr.desfocou = false;
            _this.clusterCtr.mostraPopup();
          }
          _this.atualizarIconesMarcVisiveis();
          if (_this.sl.executandoZoomDeCarregamento) {
            _this.sl.executandoZoomDeCarregamento = false;
            return $("#" + _this.config.container_id).trigger('mapa:carregado');
          }
        };
      })(this));
      this.sl.map.on('moveend', (function(_this) {
        return function() {
          return _this.atualizarIconesMarcVisiveis();
        };
      })(this));
      this.sl.markers.on('click', (function(_this) {
        return function(ev) {
          return _this.markerClick(ev);
        };
      })(this));
      this.clusterCtr = new ClusterCtr(this.sl);
    }

    Controle.prototype.hide_opcoes = function(event) {
      return $(this.id_opcoes).hide();
    };

    Controle.prototype.show_opcoes = function(event) {
      if (!this.clusterCtr.camadaAnalise) {
        return $(this.id_opcoes).show();
      }
    };

    Controle.prototype.registraEventosCamadaAnalise = function() {
      return this.clusterCtr.camadaAnalise.on('click', (function(_this) {
        return function(ev) {
          return _this.markerClick(ev);
        };
      })(this));
    };

    Controle.prototype.atualizarIconesMarcVisiveis = function() {
      if (this.sl.config.esconder_icones) {
        if (this.sl.map.getZoom() >= 16) {
          return this.mostrarIconesMarcVisiveis();
        } else {
          return this.esconderIconesMarcVisiveis();
        }
      }
    };

    Controle.prototype.mostrarIconesMarcVisiveis = function() {
      var i, j, len, m, ref, results;
      ref = this.getMarcadoresVisiveis();
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        m = ref[i];
        results.push(m.setIcon(m.slinfo.icon));
      }
      return results;
    };

    Controle.prototype.esconderIconesMarcVisiveis = function() {
      var i, j, len, m, markers, results;
      markers = this.getMarcadoresVisiveis();
      results = [];
      for (i = j = 0, len = markers.length; j < len; i = ++j) {
        m = markers[i];
        results.push(m.setIcon(window.SL_ICON_CLUSTER));
      }
      return results;
    };

    Controle.prototype.getMarcadoresVisiveis = function() {
      var m, marcadores, marcadores_visiveis, mark;
      if (this.clusterCtr.camadaAnalise) {
        marcadores = this.clusterCtr.camadaAnalise.getLayers();
      } else {
        marcadores = this.sl.markers.getLayers();
      }
      marcadores_visiveis = [];
      for (m in marcadores) {
        mark = marcadores[m];
        if (mark.hasOwnProperty("slinfo")) {
          marcadores_visiveis.push(mark);
        }
      }
      return marcadores_visiveis;
    };

    Controle.prototype.markerClick = function(ev) {
      var center, m;
      m = ev.layer;
      this.marcador_clicado = m;
      this.ultimo_marcador_clicado = m;
      if (this.sl.config.esconder_icones) {
        if (m.slinfo.ultimo_zoom) {
          this.sl.map.setView(m.slinfo.ultimo_center, m.slinfo.ultimo_zoom);
          m.slinfo.ultimo_zoom = null;
          m.slinfo.ultimo_center = null;
          return this.sl.map.closePopup();
        } else {
          m.slinfo.ultimo_zoom = this.sl.map.getZoom();
          m.slinfo.ultimo_center = this.sl.map.getCenter();
          center = new L.LatLng(m.slinfo.latitude, m.slinfo.longitude);
          return this.sl.map.setView(center, 18);
        }
      }
    };

    Controle.prototype.addCatsToControl = function(map_id) {
      var c, categorias, cats, i, j, k, l, len, len1, op, ul;
      categorias = this.sl.dados.getCategorias();
      if (categorias.length > 1) {
        op = "#" + map_id + " div.searchlight-opcoes";
        ul = op + " ul";
        $(op).html("<ul></ul>");
        cats = [];
        for (j = 0, len = categorias.length; j < len; j++) {
          k = categorias[j];
          cats.push([k, this.sl.dados.getCatByName(k).length]);
        }
        cats.sort(function(a, b) {
          return b[1] - a[1];
        });
        $(ul).empty();
        for (i = l = 0, len1 = cats.length; l < len1; i = ++l) {
          c = cats[i];
          $(ul).append("<li><input type='checkbox' checked name='" + map_id + "-cat' value='" + c[0] + "' class='categoria'/>" + c[0] + " (" + c[1] + ")</li>");
        }
        return $(op).append("<p class='center'><input type='button' onclick='" + (this.sl.getIS()) + ".control.update();' value='Atualizar Mapa' /></p>");
      } else {
        if (!$(this.id_opcoes).hasClass("sem-categoria")) {
          return $(this.id_opcoes).addClass("sem-categoria");
        }
      }
    };

    Controle.prototype.update = function() {
      $(this.id_opcoes).hide();
      this.clusterCtr.update();
      this.sl.markers.clearLayers();
      if ($("input:checkbox[name=" + this.sl.config.map_id + "-cat]:checked").size() > 0) {
        this.sl.markers.fire("data:loading");
        return setTimeout((this.sl.getIS()) + ".control.carregaDados()", 50);
      }
    };

    Controle.prototype.carregaDados = function() {
      $("input:checkbox[name=" + this.sl.config.map_id + "-cat]:checked").each((function(_this) {
        return function(index, element) {
          var cat;
          cat = $(element).val();
          return _this.sl.dados.catAddMarkers(cat, _this.sl.markers);
        };
      })(this));
      this.sl.map.fitBounds(this.sl.markers.getBounds());
      this.sl.markers.fire("data:loaded");
      return this.sl.control.atualizarIconesMarcVisiveis();
    };

    return Controle;

  })();

  module.exports = {
    Controle: Controle
  };

}).call(this);
